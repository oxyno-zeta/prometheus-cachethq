// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/prometheus-cachethq/pkg/prometheus-cachethq/tracing (interfaces: Trace)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tracing "github.com/oxyno-zeta/prometheus-cachethq/pkg/prometheus-cachethq/tracing"
)

// MockTrace is a mock of Trace interface.
type MockTrace struct {
	ctrl     *gomock.Controller
	recorder *MockTraceMockRecorder
}

// MockTraceMockRecorder is the mock recorder for MockTrace.
type MockTraceMockRecorder struct {
	mock *MockTrace
}

// NewMockTrace creates a new mock instance.
func NewMockTrace(ctrl *gomock.Controller) *MockTrace {
	mock := &MockTrace{ctrl: ctrl}
	mock.recorder = &MockTraceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrace) EXPECT() *MockTraceMockRecorder {
	return m.recorder
}

// Finish mocks base method.
func (m *MockTrace) Finish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish")
}

// Finish indicates an expected call of Finish.
func (mr *MockTraceMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockTrace)(nil).Finish))
}

// GetChildTrace mocks base method.
func (m *MockTrace) GetChildTrace(arg0 string) tracing.Trace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildTrace", arg0)
	ret0, _ := ret[0].(tracing.Trace)
	return ret0
}

// GetChildTrace indicates an expected call of GetChildTrace.
func (mr *MockTraceMockRecorder) GetChildTrace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildTrace", reflect.TypeOf((*MockTrace)(nil).GetChildTrace), arg0)
}

// GetTraceID mocks base method.
func (m *MockTrace) GetTraceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTraceID indicates an expected call of GetTraceID.
func (mr *MockTraceMockRecorder) GetTraceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceID", reflect.TypeOf((*MockTrace)(nil).GetTraceID))
}

// InjectInHTTPHeader mocks base method.
func (m *MockTrace) InjectInHTTPHeader(arg0 http.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectInHTTPHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectInHTTPHeader indicates an expected call of InjectInHTTPHeader.
func (mr *MockTraceMockRecorder) InjectInHTTPHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectInHTTPHeader", reflect.TypeOf((*MockTrace)(nil).InjectInHTTPHeader), arg0)
}

// SetTag mocks base method.
func (m *MockTrace) SetTag(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTag", arg0, arg1)
}

// SetTag indicates an expected call of SetTag.
func (mr *MockTraceMockRecorder) SetTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTag", reflect.TypeOf((*MockTrace)(nil).SetTag), arg0, arg1)
}
